
import { app, BrowserWindow, ipcMain } from 'electron';
import * as path from 'path';
const { OsScan } = require('node-nmap');

const isDev = process.env.NODE_ENV !== 'production';

function createWindow() {
  const mainWindow = new BrowserWindow({
    width: 1280,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  if (isDev) {
    // This is for a true development workflow, not used in our current build process.
    mainWindow.loadURL('http://localhost:9002');
    mainWindow.webContents.openDevTools();
  } else {
    // In production, we load the static file generated by `next build`.
    const filePath = path.join(app.getAppPath(), '.next', 'server', 'app', 'index.html');
    mainWindow.loadFile(filePath);
  }
}

app.whenReady().then(() => {
  createWindow();

  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on('window-all-closed', function () {
  if (process.platform !== 'darwin') app.quit();
});

// IPC handler for network scanning using Nmap
ipcMain.handle('perform-scan', async (event, routerIp: string) => {
  console.log(`[Electron Main] IPC "perform-scan" received for router IP: ${routerIp}. Starting Nmap scan...`);
  
  // This requires Nmap to be installed on the system and available in the PATH.
  OsScan.nmapLocation = 'nmap'; // Use 'nmap' from PATH

  return new Promise((resolve, reject) => {
    // We derive the subnet from the router's IP. e.g., 192.168.1.1 -> 192.168.1.0/24
    const subnet = routerIp.substring(0, routerIp.lastIndexOf('.')) + '.0/24';
    console.log(`[Electron Main] Scanning subnet: ${subnet}`);
    
    const quickscan = new OsScan(subnet);

    quickscan.on('complete', (data: any[]) => {
      console.log(`[Electron Main] Nmap scan successful. Found ${data.length} devices.`);
      const formattedData = data
        .filter(device => device.mac && device.ip) // Ensure we have the essential data
        .map(device => ({
          ip: device.ip,
          mac: device.mac.toUpperCase(),
          name: device.vendor || `Appareil Inconnu (${device.ip})`,
        }));
      
      resolve(formattedData);
    });

    quickscan.on('error', (error: any) => {
      console.error('[Electron Main] Nmap scan failed:', error);
      // It's crucial to resolve, even with an empty array, to not crash the frontend.
      // This can happen if Nmap is not installed or permissions are insufficient.
      resolve([]);
    });

    quickscan.startScan();
  });
});
